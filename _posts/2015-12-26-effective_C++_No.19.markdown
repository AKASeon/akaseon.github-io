---
layout: post
title:  "Effective C++ No.19. 클래스 설계는 타입 설계와 똑같이 취급하자"
date: 2015-12-26
categories: jekyll update
---

c++ 에서 새로운 클래스를 정의한다는 것은 새로운 타입을 하나 정의하는 것과 같다.  
좋은 클래스를 설계하기란 매우 까다 롭니다.  
좋은 타입을 설계하기가 그리 만만치 않다.  
좋은 타입은 일단 문법(syntax)이 자연스럽고, 의미구조(semantics)가 직관적이며, 효율적인 구현이 한가지 이상 가능해야 한다.  

# 새로 정의한 타입의 객체 생성및 소멸은 어떻게 이루어져야 하는가?  
이 부분이 어떻게 되느냐에 따라 클래스 생성자 및 소멸자의 설계가 바뀐다.  
메모리 할당 함수(operator new, operator new[], operator delete, operator delete[]) 를 직접 작성할 경우에는 이들 함수의 설계에도 영향을 미친다.  

# 객체 초기화는 객체 대입과 어떻게 달라야 하는가?  
생성자와 대입 연산자의 동작및 둘 사이의 차이점을 결정 짓는 요소이다.  
초기화와 대입을 헷갈리지 않는 것이 가장 중요하다.  
각가에 해당되는 함수 호출이 아예 다르기 때문이다.(No.4 참조)

# 새로운 타입으로 만든 객체가 값에 의해 전달되는 경우에는 어떤 의미를 줄 것인가?
어떤 타입에 대해 '값에 의한 전달'을 구현하는 쪽은 바로 복사 생성자이다.  

# 새로운 타입이 가질수 있는 적법한 값에 대한 제약은 무엇으로 잡을 것인가?  
전부는 아니지만 클래스의 데이터 멤버의 몇 가지 조합 값만은 반드시 우효해야 한다.  
이런한 조합을 가리켜 클래스의 불변속성(invariant)이라고 하며, 클래스 차원에서 지켜주어야 한다.  
이 불변속성에 따라 클래스 멤버 함수안에서 해주어야 할 에러 점검루틴이 좌우된다.  
특히 생성자, 대입연산자, 각종 setter 함수는 불변속성에 많이 좌우된다.  
그 뿐만 아니라 불변속성은 여러분의 함수가 발생시키는 예외에도 영향을 미친다.  

# 기존의 클래스 상속 게통망(inheritance graph)에 맞출것인가?  
이미 갖고 있는 클래스로 부터 상속을 시킨다라고 하면, 이들 클래스에 의해 제약을 받게 된다.  
특히 멤버가 가상인가 비가상인가의 여부가 가장 큰 요인이다.(No.34, No.36 참조)  
새로 생성한 클래스를 다른 클래스들이 상속할수 있게 만들자고 하면 멤버 함수의 가상 함수 여부가 결정된다.  
특히 소멸자가 그러하다.(No.7 참조)

# 어떤 종류의 타입 변환을 허용할 것인가?  
T1 타입의 객체를 T2 타입의 객체로 암시적으로(implicitly) 변환되도록 만들고 싶다면 T1 클래스에 타입 변환 함수를 하나 넣어두던가 ( operator T2 )
아니면 인자 한개로 호출될 수 있는 비 명시 호출(non-explicit) 생성자를 T2 클래스에 넣어 두어야 한다.  
명시적(explicit) 타입 변환만 허용하고 싶으면 해당 변환을 맡는 별도 이름의 함수를 만들되 타입 변환 연산자 혹은 비 명시 호출 생성자는 만들면 안된다.  (No.15 에서 명시적 변환과 암시적 변환 함수의 예제를 참조)

# 어떤 연산자와 함수를 두어야 의미 있을까?  
어떤 것들은 멤버 함수로 적당할 것이고 또 몇몇은 그렇지 않을 것이다.(No.23, No.24, No.26 참조)  

# 표준 함수들 중 어떤 것을 허용하지 말 것인가?  
private 으로 선언해야 하는 함수가 여기에 해당된다. (No.6 참조)  

# 새로운 타입의 멤버에 대한 접근 권한을 어느쪽에 줄것인가?
어떤 클래스 멤버를 public, protected, private 영역에 둘것인가를 결정하는데 도움을 주는 질문이다.  
또한 프렌드로 만들어야 할 클래스 및 함수를 정하는것은 물론이고 한 클래스를 다른 클래스에 중첩시켜도 되는가에 대한 결정을 내리는데도 이 질문이 도움을 준다.  

# '선언되지 않은 인터페이스'로 무엇을 둘것인가?
생성할 타입이 제공할 보장이 어떤 종류 일까에 대한 질문으로서 보장할수 있는 부분은 수행 성능 및 예외 안전성(No.29 참조) 그리고 자원사용(잠금, 동적 메모리) 이다.  
보장하겠다고 결정한 결과는 클래스 구현에 있어서 제약으로 작용한다.  

# 새로 만드는 타입이 얼마나 일반적인가?  
실상은 타입 하나를 정의하는 것이 아닐지도 모른다.  
새로 정의하는 것은 동일 계열의 타입군(family of types) 전체일지도 모른다.  
그렇다면 새로운 클래슬 생성하지 말고 새로운 클래스 템플릿을 정의해야 한다.  

# 정말로 필요한 타입인가?
기존 클래스에 대해 기능 몇개가 아쉬워서 파생 클래스를 새로 생성한다면, 차라리 간단하게 비멤버 함수라든지 템플릿을 몇개 더 정의하는 편이 낫다.   

> 클래스 설계는 타입 설계입니다.  
> 새로운 타입을 정의하게 전에 이번 항목에 나온 모든 고려사항을 빠짐 없이 점검해야 한다.  
